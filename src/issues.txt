Issues to be resolved + investigated: 

1. rmse index is always 0, due to the fact that the coefficients seem to always be the same across all the thresholds (SOLVED)
Idea: Is this caused by the fact that because I use ensemble, the last model is saved instead of the median? 
so currently i am able to get it to choose not just the index 0, but have seen index 1 and 2 
so maybe it is not an issue for now. 

2. How do I use the median ensemble coefficients instead of the last fitted model? (SOLVED)
   My calculations seem to be getting worse if I use this compared to before
# TODO: how do i use the ensemble coefficients instead of the last model coefficients and pass it to my predict model 
Have added the calculation of the median coefficient and ensured the optimizer is reinitialised with it 

3. My model now cannot handle any noise in the data, it will send warning and abort

4. Warning 
lsoda--  warning..internal t (=r1) and h (=r2) are
       such that in the machine, t + h = t on the next step 
I get this warning when the hyperparameter is too low, so how do i generalize my code to choose this hyperparameter? 

Maybe i can try to not calculate the derivative and just do x, y, z? 

TODO

1. Figure out why code cannot handle noise 

2. Get code to be able to identify specific window of time it wants to take in, and predict 
- currently it goes from t = 0 to whatever window you specify 

Features that I need to implement: 
- Modularize code further so this can run on different type of data inputs (currently _fit.py is generalized, but _predict.py is quite specific)
  The goal would be to be able to just input xyz data into my code, and then it will output the prediction (maybe in a 3D diagram)
  of the trajectory, but the prediction is updated every 0.5s
- Take in adaptive window of data based on how well prediction is and predict only 0.5s of future trajectory 
- Continuous prediction every 0.5 seconds using a while loop 

After implementing features:
- test on real data, start to quantify accuracy 

